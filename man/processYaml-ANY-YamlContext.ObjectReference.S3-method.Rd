% Generated by roxygen2 (4.0.2): do not edit by hand
\docType{methods}
\name{processYaml,ANY,YamlContext.ObjectReference.S3-method}
\alias{processYaml,ANY,YamlContext.ObjectReference.S3-method}
\alias{processYaml-ANY-YamlContext.ObjectReference.S3-method}
\title{Process YAML Markup (ANY-YamlContext.ObjectReference.S3)}
\usage{
\S4method{processYaml}{ANY,YamlContext.ObjectReference.S3}(from, ctx = NULL,
  where = parent.frame(), strict = FALSE, ...)
}
\arguments{
\item{from}{\code{\link{ANY}}.}

\item{ctx}{\strong{Signature argument}.
Markup proecessing context.}

\item{where}{\code{\link{environment}}.
Environment in which to assign the function in the \code{src} field of
class \code{\link[yamlr]{ObjectReferenceYaml.S3}}. Only relevant
in case the YAML has been provided via comments instead of an
inline string as this involves some additional transformation steps.}

\item{strict}{\code{\link{logical}}.
\code{TRUE}: error if no YAML markup could be identified (which in turn
results in field \code{original} in class
\code{\link[yamlr]{ObjectReferencedYaml.S3}} being empty);
\code{FALSE}: no error if no YAML markup could be identified.}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\value{
\code{\link{character}}. Identified YAML markup.
}
\description{
See generic: \code{\link[yamlr]{processYaml}}
}
\examples{
\dontrun{
  
##------------------------------------------------------------------------------
## From function //
##------------------------------------------------------------------------------

## Get //  
yaml <- processYaml(
  from = function() {
    "object-ref: {id: x_1, where: .GlobalEnv, as: ref_1}"
    ref_1 * 2
  },
  ctx = YamlContext.ObjectReference.S3()
)

## Inspect //
yaml$src
## --> note that the original YAML markup has been substituted by a 
## suitable expression for this specific context (`yaml$src$x_1$get_assign`).
## The processing is now complete and the source object can be used as is
## as it is now "self contained" in the sense that it contains all information
## that are needed in order for it to do its job.

## Actual use of the source object //
x_1 <- 10
eval(yaml$src())

## Clean up //
rm(x_1)
rm(yaml)

##------------------------------------------------------------------------------
## From expression //
##------------------------------------------------------------------------------

## Get //  
yaml <- processYaml(
  from = captureExpression({
    "object-ref: {id: x_1, where: .GlobalEnv, as: ref_1}"
    ref_1 * 2
  }),
  ctx = YamlContext.ObjectReference.S3()
)

## Inspect //
yaml$src

## Actual use of the source object //
x_1 <- 10
eval(yaml$src)

## Clean up //
rm(x_1)
rm(yaml)

}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/yamlr}
}
\seealso{
\code{
   \link[yamlr]{processYaml},
   \link[yamlr]{getYaml},
   \link[yamlr]{parseYaml},
   \link[yamlr]{buildExpressionFromYaml},
   \link[yamlr]{updateYamlSource}
}
}

