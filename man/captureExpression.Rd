% Generated by roxygen2 (4.0.2): do not edit by hand
\name{captureExpression}
\alias{captureExpression}
\title{Capture expression}
\usage{
captureExpression(expr, caller_offset = 1, brackets = TRUE)
}
\arguments{
\item{expr}{\strong{Signature argument}.
Expression to capture.}

\item{caller_offset}{\code{\link{numeric}}.
If specified, the offset in the callstack of the expression to be
treated as the caller.}

\item{brackets}{\code{\link{logical}}.
\code{TRUE}: ensure that resulting expression is wrapped inside curly
brackets (\code{{}});
\code{FALSE}: expression returned exactly as captured.}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\value{
\code{curly brackets call} (can't write out the actual code
in roxygen) if \code{brackets = TRUE}, else class of evaluated
expression.
}
\description{
Captures an arbitrary R expression \strong{before} it is actually
evaluated. This might be useful in situations, where you want to delay
the evaluation of the expression.
}
\examples{
\dontrun{

## Expression wrapped in curly brackets //  
res <- captureExpression({
  "object-ref: {id: x_1}"
  x_2 * 2
})
res
class(res)
inherits(res, "call")

## Expression w/o curly brackets //
res <- captureExpression(x_2 * 2)
res
class(res)

res <- captureExpression(x_2 * 2, brackets = FALSE)
res
class(res)

## Character //
res <- captureExpression("object-ref: {id: x_1}")
res
class(res)

res <- captureExpression("object-ref: {id: x_1}", brackets = FALSE)
res
class(res)

}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/yamlr}
}
\seealso{
\code{
  	\link[base]{substitute},
    \link[base]{parent.frame}
}
}

